#!/bin/bash

#
# InputOverides
#
sourcedir=$1
outputdir=$2
# rowsperFile=$3

## Do not modify these variables
declare -a globbers=( "*.txt" "**/*.txt" "**/**/*.txt" "**/**/**/*.txt" "**/**/**/**/*.txt" )
declare -a fieldSeparators=( ":" "," ";" )
regex="^[a-z0-9!#\$%&'*+/=?^_\`{|}~-]+(\.[a-z0-9!#$%&'*+/=?^_\`{|}~-]+)*@([a-z0-9]([a-z0-9-]*[a-z0-9])?\.)+[a-z0-9]([a-z0-9-]*[a-z0-9])?\$"

#
# ability to log the messages to screen or file
#
DEBUG=$4
logfile="$HOME/datamelt-emails-hash.log"

log( ) {
  msg=$1
  if [[ ! -z "$DEBUG" ]]; then
    ## if DEBUG variable is not empty, do this
    echo "$msg" >> $logfile
  else
    echo "    $msg"
  fi
}

## Prettify the log
log "---------------------------------------------------------------------------------"
log "Log File - $logfile"
log $( date +%F )
log ""

#
# Prepare a single file
#
prepareInput( ) {
  file=$1
  lines=$( cat "$file" | wc -l )
  firstline=$( head -n 1 "$file" )

  if [ -f "$file" ]; then
    log ""
    log "Working with"
    log "============"
    log "FILE: $file"
    log "LINES: $lines"
    log "FIRSTLINE: $firstline"

    getFieldSeparator
    log "FIELD_SEPARATOR: $fs"
    # log ""
    fileExists=true
  else
    fileExists=false
  fi
}

#
# Show Output
#
showOutput( ) {
  log "EMAIL: $email"
  log "domain: $domain"
  log "hashmd5: $hashmd5"
  log "hashmd5_uc: $hashmd5_uc"
  log "hashsha1: $hashsha1"
  log "hashsha1_uc: $hashsha1_uc"
  log "hashsha256: $hashsha256"
  log "hashsha256_uc: $hashsha256_uc"
  log ""
}

#
# Determine the field separator
#
tryFieldSeparator( ) {
    local fs=$1
    isParsed=false
    while IFS="$fs" read email pw
    do
      if [[ ! -z "$pw" ]]; then
        isParsed=true
      fi
    done < <( head -n 1 "$file" )
}
getFieldSeparator( ) {
    for fs in "${fieldSeparators[@]}"; do
      tryFieldSeparator "$fs"
      if [ "$isParsed" = true ]; then
        break
      fi
    done

    if [ "$isParse" = false ]; then
      log "---------- FATAL"
      log "Could not find a suitable field separator, this is not a CSV file"
      log ""
    fi
}

#
# check if a valid email
#
checkEmail( ) {
  local em=$1
  if [[ $em=~$regex ]] ; then
    isEmail=true
  else
    isEmail=false
  fi
}

#
# parse out the domain
#
parseDomain( ) {
  parts=(${email//@/ })
  domain=${parts[1]}
}

#
# Write new line to file
#
writeLine( ) {
  local params=($@)

  printf -v joined '%s,' "${params[@]}"
  line="${joined%,}"
  
  echo "$line" >> $destinationfile
}

#
# Loop through the directories and get the files to READ from
#
getFiles( ) {
  for dd in "${globbers[@]}" ; do
    folderglob=$sourcedir$dd
    # log "checking folderglob ($folderglob)"

    # find the next file to read from
    for originalreadfile in $folderglob; do
      if [[ ! -f $originalreadfile ]]; then
        continue
      fi

      # find the new read location
      destinationfile="${originalreadfile/$sourcedir/$outputdir/}"
      # if this file exists in the new location, then its locked
      if [ -f "$destinationfile" ]; then
        continue
      fi
      newreadfile="${originalreadfile}.lock"
      # does the lockfile exist?
      if [ -f "$newreadfile" ]; then
        continue
      fi

      # log "newreadfile ($newreadfile)"
      prepareInput "$originalreadfile"
      if [ "$isParse" = false ]; then 
        # File did not parse, so skip it
        continue
      fi
      
      # copy the readfile over to the new dir if it doesn't exist
      outputdirpath=$( dirname $newreadfile )
      if [[ ! -d $outputdirpath ]]; then
        # log "Making the output dir ($outputdirpath)"
        mkdir -p "$outputdirpath"
      fi

      # move the doc to and then read from it
      # log "Copying file... $originalreadfile $newreadfile"
      cp "$originalreadfile" "$newreadfile"
      parseFile

    done
  done
}

#
# Parse the file
#
parseFile( ) {
  start=`date +%s`
  count=0
  # log "Parsing the new file"
  while IFS="$fs" read -r email
  do
    # does the email contain invalid chars?
    if [[ ! "${email/;}" = "$email" ]]; then
      arrIN=(${email//;/ })
      email=${arrIN[0]}
    fi

    # does the email contain invalid chars?
    if [[ ! "${email/:}" = "$email" ]]; then
      arrIN=(${email//:/ })
      email=${arrIN[0]}
    fi

    checkEmail $email
    if [ "$isEmail" = false ]; then
      continue
    fi
    # log "checking email $email"

    count=$(($count+1))

    parseDomain

    hashmd5=$( echo -n "$email" | md5sum | awk '{print $1}' )
    hashmd5_uc=$( echo -n ${email^^} | md5sum | awk '{print $1}' )
    
    hashsha1=$( echo -n "$email" | sha1sum | awk '{print $1}' )
    hashsha1_uc=$( echo -n ${email^^} | sha1sum | awk '{print $1}' )
    
    hashsha256=$( echo -n "$email" | sha256sum | awk '{print $1}' )
    hashsha256_uc=$( echo -n ${email^^} | sha256sum | awk '{print $1}' )

    # hashsha1_uc="$email"
    # hashmd5_uc="$email"
    # hashsha256="$email"
    # hashsha256_uc="$email"

    # showOutput
    writeLine $email $domain $hashmd5 $hashmd5_uc $hashsha1_uc $hashsha1 $hashsha256 $hashsha256_uc

  # done < <(cut -d "$fs" -f1 $newreadfile | head -n 1)
 done < <(cut -d "$fs" -f1 "$newreadfile")

  rm -f "$newreadfile"
  end=`date +%s`
  runtime=$((end-start))
  totaltime=$(( $(( $((3200000000/$count))*$runtime ))/60/60/24 ))

  log "RECORDS: $count"
  log "RUNTIME: $runtime"
  log "TOTAL CALCULATED TIME: $totaltime days"
  log ""
}

getFiles $sourcedir